{"version":3,"sources":["components/info.js","components/form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","react_default","a","createElement","Form","props","onSubmit","weatherMethod","className","type","name","htmlFor","Weather","city","country","temp","pressure","sunset","error","API_KEY","App","state","undefined","gettingWeather","_callee","e","api_url","data","date","sunset_date","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","sys","Date","setTime","getHours","getMinutes","getSeconds","_this","setState","main","stop","info","components_form","this","components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAQeA,EANF,kBACZC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,2HACAF,EAAAC,EAAAC,cAAA,yKCWaC,EAdF,SAAAC,GAAK,OACjBJ,EAAAC,EAAAC,cAAA,QAAMG,SAAUD,EAAME,eAGrBN,EAAAC,EAAAC,cAAA,QAAMK,UAAU,wBACbP,EAAAC,EAAAC,cAAA,SAAOK,UAAU,qCAAqCC,KAAK,OAAOC,KAAK,SACvET,EAAAC,EAAAC,cAAA,SAAOK,UAAU,oCAAoCG,QAAQ,WAC5DV,EAAAC,EAAAC,cAAA,QAAMK,UAAU,qDAAhB,+EAGJP,EAAAC,EAAAC,cAAA,UAAQK,UAAU,gEAAlB,+ECIaI,EAdC,SAAAP,GAAK,OAClBJ,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aACZH,EAAMQ,MACPZ,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,kGAAoBE,EAAMQ,KAA1B,KAAkCR,EAAMS,SACxCb,EAAAC,EAAAC,cAAA,iFAAkBE,EAAMU,MACxBd,EAAAC,EAAAC,cAAA,8DAAcE,EAAMW,UACpBf,EAAAC,EAAAC,cAAA,iFAAkBE,EAAMY,SAG1BhB,EAAAC,EAAAC,cAAA,KAAGK,UAAU,SAASH,EAAMa,SCP1BC,EAAU,mCA6EDC,6MAzEdC,MAAQ,CACPN,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,YAAQK,EACRJ,WAAOI,KAIRC,qDAAiB,SAAAC,EAAOC,GAAP,IAAAZ,EAAAa,EAAAC,EAAAV,EAAAW,EAAAC,EAAA,OAAAC,EAAA5B,EAAA6B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UAChBT,EAAEU,mBACEtB,EAAOY,EAAEW,OAAOC,SAASxB,KAAKyB,OAFlB,CAAAN,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EAOdK,MAAK,qDAAAC,OAAsD3B,EAAtD,WAAA2B,OAAoErB,EAApE,kBAPS,cAMTO,EANSM,EAAAS,KAAAT,EAAAE,KAAA,EAQIR,EAAQgB,OARZ,OAQTf,EARSK,EAAAS,KAUXxB,EAASU,EAAKgB,IAAI1B,QAClBW,EAAO,IAAIgB,MACVC,QAAQ5B,GACTY,EAAcD,EAAKkB,WAAa,IAAMlB,EAAKmB,aAAe,IAAMnB,EAAKoB,aAE1EC,EAAKC,SAAS,CACbnC,KAAMY,EAAKwB,KAAKpC,KAChBF,KAAMc,EAAKjB,KACXI,QAASa,EAAKgB,IAAI7B,QAClBE,SAAUW,EAAKwB,KAAKnC,SACpBC,OAAQY,EACRX,WAAOI,IArBQU,EAAAE,KAAA,iBAwBfe,EAAKC,SAAS,CACbnC,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,YAAQK,EACRJ,MAAO,qIA9BO,yBAAAc,EAAAoB,SAAA5B,oIAoChB,OACCvB,EAAAC,EAAAC,cAAA,OAAKK,UAAU,WACdP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,QACfP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aACdP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACdP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,iBACdP,EAAAC,EAAAC,cAACkD,EAAD,OAEDpD,EAAAC,EAAAC,cAAA,OAAKK,UAAU,iBACdP,EAAAC,EAAAC,cAACmD,EAAD,CAAM/C,cAAegD,KAAKhC,iBAC1BtB,EAAAC,EAAAC,cAACqD,EAAD,CACCzC,KAAMwC,KAAKlC,MAAMN,KACjBF,KAAM0C,KAAKlC,MAAMR,KACjBC,QAASyC,KAAKlC,MAAMP,QACpBE,SAAUuC,KAAKlC,MAAML,SACrBC,OAAQsC,KAAKlC,MAAMJ,OACnBC,MAAOqC,KAAKlC,MAAMH,oBAhERuC,IAAMC,uBCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7501eec2.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Info = () => (\n\t<div>\n\t\t<h2>Погодное приложение</h2>\n\t\t<p>Узнайте погоду в вашем городе</p>\n\t</div>\n);\nexport default Info;\n\n","import React from \"react\";\n\nconst Form = props => (\n\t<form onSubmit={props.weatherMethod}>\n\t\t{/*<input type=\"text\" name=\"city\" placeholder=\"Город\"/>*/}\n\n\t\t<span className=\" input input--haruki\">\n\t\t\t\t\t<input className=\" input__field input__field--haruki\" type=\"text\" name=\"city\"/>\n\t\t\t\t\t<label className=\"input__label input__label--haruki\" htmlFor=\"input-1\">\n\t\t\t\t\t\t<span className=\"input__label-content input__label-content--haruki\">Введите город</span>\n\t\t\t\t\t</label>\n\t\t</span>\n\t\t<button className=\"button button--ujarak button--border-thin button--text-thick\">Узнать погоду</button>\n\t</form>\n);\n\nexport default Form;","import React from \"react\";\n\nconst Weather = props => (\n\t\t\t<div className=\"infoWeath\">\n\t\t\t\t{ props.city &&\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<p>Местоположение: {props.city}, {props.country}</p>\n\t\t\t\t\t\t<p>Температура : {props.temp}</p>\n\t\t\t\t\t\t<p>Давление: {props.pressure}</p>\n\t\t\t\t\t\t<p>Заход солнца: {props.sunset}</p>\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t\t<p className=\"error\">{props.error}</p>\n\t\t\t</div>\n\t\t);\n\nexport default Weather;","import React from \"react\";\nimport Info from \"./components/info\";\nimport Form from \"./components/form\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY = \"4e2ef85534c67d7b6c3d8523605a8744\";\n\nclass App extends React.Component{\n\n\tstate = {\n\t\ttemp: undefined,\n\t\tcity: undefined,\n\t\tcountry: undefined,\n\t\tpressure: undefined,\n\t\tsunset: undefined,\n\t\terror: undefined\n\t};\n\n\n\tgettingWeather = async (e) => {\n\t\te.preventDefault();\n\t\tvar city = e.target.elements.city.value;\n\n\t\t\n\t\tif (city) {\n\t\t\tconst api_url = await\n\t\t\t\tfetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n\t\t\tconst data = await api_url.json();\n\n\t\t\tvar sunset = data.sys.sunset;\n\t\t\tvar date = new Date();\n\t\t\tdate.setTime(sunset);\n\t\t\tvar sunset_date = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n\n\t\tthis.setState({\n\t\t\ttemp: data.main.temp,\n\t\t\tcity: data.name,\n\t\t\tcountry: data.sys.country,\n\t\t\tpressure: data.main.pressure,\n\t\t\tsunset: sunset_date,\n\t\t\terror: undefined\n\t\t});\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\ttemp: undefined,\n\t\t\t\tcity: undefined,\n\t\t\t\tcountry: undefined,\n\t\t\t\tpressure: undefined,\n\t\t\t\tsunset: undefined,\n\t\t\t\terror: \"Введите название города\"\n\t\t\t});\n\t\t}\n\t};\n\n\trender(){\n\t\treturn(\n\t\t\t<div className=\"wrapper\">\n\t\t\t\t<div className=\"main\">\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<div className=\"col-sm-5 info\">\n\t\t\t\t\t\t\t<Info/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"col-sm-7 form\">\n\t\t\t\t\t\t\t<Form weatherMethod={this.gettingWeather} />\n\t\t\t\t\t\t\t<Weather\n\t\t\t\t\t\t\t\ttemp={this.state.temp}\n\t\t\t\t\t\t\t\tcity={this.state.city}\n\t\t\t\t\t\t\t\tcountry={this.state.country}\n\t\t\t\t\t\t\t\tpressure={this.state.pressure}\n\t\t\t\t\t\t\t\tsunset={this.state.sunset}\n\t\t\t\t\t\t\t\terror={this.state.error}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}